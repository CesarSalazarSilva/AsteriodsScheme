#!r6rs
(import (rnrs lists (6))
        (rnrs base (6))
        (rnrs io simple (6)))

(define null '())

;Estas constantes
(define a 2); multiplicador
(define c 0); aumento
(define m 9); modulo
(define radionave 1)
(define radiodisparo 1)
(define radioasteroideinicial 8)
(define Velocidad_disparo 2)
(define pi 3.1415926535897932384626433832795028841)

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
;Esta función random tuma un xn y obtiene el xn+1 de la secuencia de números aleatorios.
(define myRandom
  (lambda
      (xn)
    (mod (+ (* a xn) c) m)
    )
  )

;Funcion  : Convierte un numero de grados a radianes.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Grad_Rad numero)
  (/ (* pi numero) 180)
  )

;Funcion  : Convierte un numero de radianes a grados.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Rad_Grad numero)
  (/ (* 180 numero) pi)
  )

;-------------------------------------------------------------------------------------------------- TDA NAVE
;-------------------------------------------------------------------------------------------------- REPRESENTACION NAVE
; (list  space px py velocidad seed estadoJuego angulo)

;-------------------------------------------------------------------------------------------------- CONSTRUCTORES NAVE

;Funcion  : Construye una nave.
;A.Entrada: Una estructura space, un entero para: posicion x, posicion, velocidad y para seed.
;           ("P" ó "V" ó "D") para el estado de juego, un numero para angulo 
;A.Salida : Una estructura nave.
;
;Funcion Recursiva? : No, dato que creamos una nueva nave solo asignando valores en la lista.
;
;Ejemplos( Primero la invocacion , luego de la flecha esta el resultado esperado de esta):
;
;
;
(define (create_nave  space px py velocidad seed estadoJuego angulo)
  (if (and  (number? px) (number? py) (number? velocidad) (number? seed)  )
      (list  space px py velocidad seed estadoJuego angulo)
      null
      )  
  )

;-------------------------------------------------------------------------------------------------- PERTENENCIA NAVE

;Funcion  : Verifica si el argumento entregado corresponde a una estructura Nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : Booleano dependiedo si cumple con los rquesitos de una estructura nave.
;
;Funcion Recursiva? : No
;
;Ejemplos:
;
;
;
(define (nave? posibleNave)
  (if (list? posibleNave)
      (if (= 7 (length posibleNave))
          (if (and
               (integer? (car (cdr posibleNave)))
               (integer? (car (cdr (cdr posibleNave))))
               (integer? (car (cdr (cdr (cdr posibleNave)))))
               (integer? (car (cdr (cdr (cdr (cdr posibleNave))))))
               )
              #t
              #f
              )
          #f
          )
      #f
      )
  )

;-------------------------------------------------------------------------------------------------- SELECTORES NAVE -

;Funcion  : Selecciona el space completo entregado a la estructura nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : Space presente en la nave.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_space_nave nave)
  (if (nave? nave)
      (car  nave)
      #f
      )
  )

;Funcion  : Selecciona componente x de la nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : De ser nave retorna su componente x.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_px_nave nave)
  (if (nave? nave)
      (car (cdr nave))
      #f
      )
  )

;Funcion  : Selecciona componente y de la nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : De ser nave retorna su componente y.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_py_nave nave)
  (if (nave? nave)
      (car (cdr (cdr nave)))
      #f
      )
  )

;Funcion  : Selecciona componente velocidad de la nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : De ser nave retorna su componente velocidad.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_velocidad_nave nave)
  (if (nave? nave)
      (car (cdr (cdr (cdr nave))))
      #f
      )
  )

;Funcion  : Selecciona componente seed de la nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : De ser nave retorna su componente seed.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_seed_nave nave)
  (if (nave? nave)
      (car (cdr (cdr (cdr (cdr nave)))))
      #f
      )
  )

;Funcion  : Selecciona componente estadojuego de la nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : De ser nave retorna su componente estadojuego.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_estadojuego_nave nave)
  (if (nave? nave)
      (car (cdr (cdr (cdr (cdr (cdr nave))))))
      #f
      )
  )

;Funcion  : Selecciona componente angulo de la nave.
;A.Entrada: Una estructura nave.
;            
;A.Salida : De ser nave retorna su componente angulo.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_angulo_nave nave)
  (if (nave? nave)
      (car (cdr (cdr (cdr (cdr (cdr(cdr nave)))))))
      #f
      )
  )

;-------------------------------------------------------------------------------------------------- MODIFICADORES NAVE -

;Funcion  : Toma una estructura nave, un nuevo space y retorna una nueva nave con nuevo space.
;A.Entrada: Una estructura nave y un nuevo space.
;            
;A.Salida : Nave con su space modificado
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (nave->space nave nuevospace)
  (if (and (nave? nave)
           )
      (create_nave nuevospace (Selector_px_nave nave) (Selector_py_nave nave) (Selector_velocidad_nave nave) (Selector_seed_nave nave) )
      nave
      )
  )

;Funcion  : Toma una estructura nave, un nuevo "x" y retorna una nueva nave con nuevo "x".
;A.Entrada: Una estructura nave y un nuevo "x".
;            
;A.Salida : Nave con su posicion "x" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (nave->px nave nuevopx)
  (if (and (nave? nave)
           (< -1 nuevopx)
           )
      ;(create_nave  space px py velocidad seed estadoJuego angulo)
      (create_nave (Selector_space_nave nave) nuevopx (Selector_py_nave nave) (Selector_velocidad_nave nave) (Selector_seed_nave nave) (Selector_estadojuego_nave nave) (Selector_angulo_nave nave))
      nave
      )
  )

;Funcion  : Toma una estructura nave, un nuevo "y" y retorna una nueva nave con nuevo "y".
;A.Entrada: Una estructura nave y un nuevo "y".
;            
;A.Salida : Nave con su posicion "y" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (nave->py nave nuevopy)
  (if (and (nave? nave)
           (< -1 nuevopy)
           )
      (create_nave (Selector_space_nave nave) (Selector_px_nave nave) nuevopy (Selector_velocidad_nave nave) (Selector_seed_nave nave) (Selector_estadojuego_nave nave) (Selector_angulo_nave nave) )
      nave
      )
  )

;Funcion  : Toma una estructura nave, una nueva "velocidad" y retorna una nueva nave con nuevo "velocidad".
;A.Entrada: Una estructura nave y una nueva "velocidad".
;            
;A.Salida : Nave con su posicion "velocidad" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (nave->velocidad nave nuevavelocidad)
  (if (and (nave? nave)
           (integer? nuevavelocidad)
           )
      (create_nave (Selector_space_nave nave) (Selector_px_nave nave) (Selector_py_nave nave) nuevavelocidad (Selector_seed_nave nave) (Selector_estadojuego_nave nave) (Selector_angulo_nave nave))
      nave
      )
  )

;Funcion  : Toma una estructura nave, un nuevo "seed" y retorna una nueva nave con nuevo "seed".
;A.Entrada: Una estructura nave y un nuevo "seed".
;            
;A.Salida : Nave con su posicion "seed" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (nave->seed nave nuevoseed)
  (if (and (nave? nave)
           )
      (create_nave(Selector_space_nave nave) (Selector_px_nave nave) (Selector_py_nave nave) (Selector_velocidad_nave nave) nuevoseed (Selector_estadojuego_nave nave) (Selector_angulo_nave nave) )
      nave
      )
  )

;Funcion  : Toma una estructura nave, un nuevo "estadojuego" y retorna una nueva nave con nuevo "estadojuego".
;A.Entrada: Una estructura nave y un nuevo "estadojuego".
;            
;A.Salida : Nave con su posicion "estadojuego" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (nave->estadojuego nave nuevoestado)
  (if (and (nave? nave)
           )
      (create_nave(Selector_space_nave nave) (Selector_px_nave nave) (Selector_py_nave nave) (Selector_velocidad_nave nave) (Selector_seed_nave nave) nuevoestado (Selector_angulo_nave nave) )
      nave
      )
  )

;Funcion  : Toma una estructura nave, un nuevo "angulo" y retorna una nueva nave con nuevo "angulo".
;A.Entrada: Una estructura nave y un nuevo "angulo".
;            
;A.Salida : Nave con su posicion "angulo" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (nave->angulo nave nuevoangulo)
  (if (and (nave? nave)
           )
      (create_nave(Selector_space_nave nave) (Selector_px_nave nave) (Selector_py_nave nave) (Selector_velocidad_nave nave) (Selector_seed_nave nave) (Selector_estadojuego_nave nave) nuevoangulo )
      nave
      )
  )

;-------------------------------------------------------------------------------------------------- F.VARIAS NAVE

;Funcion  : Movimiento de la nave.
;A.Entrada: Un space, un angulo, una velocidad y semilla distinta.
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
;FALTA VERIFICAR CON EL RESTO Y ENTREGAR EL SPACE
(define (moveShip space angulo velocidad seed)
  (if (ComparacionNave (Selector_Asteroides space)
                       (nave->velocidad (nave->angulo (nave->py (nave->px (Selector_Nave space)
                                                                          (mod (+ (Selector_px_nave (Selector_Nave space))
                                                                                  (round (* velocidad
                                                                                            (cos (Grad_Rad ( + (Selector_angulo_nave (Selector_Nave space))
                                                                                                               angulo
                                                                                                               )
                                                                                                           )
                                                                                                 ) 
                                                                                            )
                                                                                         )
                                                                                  )
                                                                               (Selector_N space)
                                                                               )
                                                                          )                      
                                                                (mod (+ (Selector_py_nave (Selector_Nave space))
                                                                        (round (* velocidad
                                                                                  (sin (Grad_Rad ( + (Selector_angulo_nave (Selector_Nave space))
                                                                                                     angulo
                                                                                                     )
                                                                                                 )
                                                                                       )
                                                                                  )
                                                                               )
                                                                        )
                                                                     (Selector_N space)
                                                                     )
                                                                )
                                                      ( + (Selector_angulo_nave (Selector_Nave space))
                                                          angulo
                                                          )               
                                                      )
                                        (+ (Selector_velocidad_nave (Selector_Nave space))
                                           velocidad
                                           )    
                                        )
                       radionave)
      (nave->estadojuego (Selector_Nave space) 0)
      (nave->velocidad (nave->angulo (nave->py (nave->px (Selector_Nave space)
                                                         (mod (+ (Selector_px_nave (Selector_Nave space))
                                                                 (round (* velocidad
                                                                           (cos (Grad_Rad ( + (Selector_angulo_nave (Selector_Nave space))
                                                                                              angulo
                                                                                              )
                                                                                          )
                                                                                ) 
                                                                           )
                                                                        )
                                                                 )
                                                              (Selector_N space)
                                                              )
                                                         )                      
                                               (mod (+ (Selector_py_nave (Selector_Nave space))
                                                       (round (* velocidad
                                                                 (sin (Grad_Rad ( + (Selector_angulo_nave (Selector_Nave space))
                                                                                    angulo
                                                                                    )
                                                                                )
                                                                      )
                                                                 )
                                                              )
                                                       )
                                                    (Selector_N space)
                                                    )
                                               )
                                     ( + (Selector_angulo_nave (Selector_Nave space))
                                         angulo
                                         )               
                                     )
                       (+ (Selector_velocidad_nave (Selector_Nave space))
                          velocidad
                          )    
                       )      
      ) 
  )

;-------------------------------------------------------------------------------------------------------------FIN NAVE-------------

;-------------------------------------------------------------------------------------------------- TDA ASTEROIDES
;-------------------------------------------------------------------------------------------------- REPRESENTACION ASTEROIDE
;(init_asteroid  space px py angulo velocidad radio seed )
;-------------------------------------------------------------------------------------------------- CONSTRUCTOR ASTEROIDE
;Funcion  : Construye un asteroide.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (create_Asteroide  space px py angulo velocidad radio seed )
  (if (and (number? px) (number? py) (number?  angulo) (number?  velocidad) (number? seed) (number? radio) )
      (list space px py angulo velocidad radio seed)
      null
      )
  )

;-------------------------------------------------------------------------------------------------- F. DE PERTENENCIA ASTEROIDE

;Funcion  : Verifica si el argumento entregado corresponde a una estructura Asteroide.
;A.Entrada: Una estructura Asteroide.
;            
;A.Salida : Booleano dependiedo si cumple con los rquesitos de una estructura Asteroide.
;
;Funcion Recursiva? : No
;
;Ejemplos:
;         (create_Asteroide  sp1 5 4 0 1 2 134 )
;
;
(define (Asteroide? posibleAsteroide)
  (if (list? posibleAsteroide)
      (if (= 7 (length posibleAsteroide))
          (if (and
               (number? (car (cdr posibleAsteroide)))
               (number? (car (cdr (cdr posibleAsteroide))))
               (number?  (car (cdr (cdr (cdr posibleAsteroide)))))
               (number?  (car (cdr (cdr (cdr (cdr posibleAsteroide))))))
               (number? (car (cdr (cdr (cdr (cdr (cdr posibleAsteroide)))))))
               (number? (car (cdr (cdr (cdr (cdr (cdr (cdr posibleAsteroide))))))))
               )
              #t
              #f
              )
          #f
          )
      #f
      )
  )

;-------------------------------------------------------------------------------------------------- SELECTORES ASTEROIDE -
;(list space px py angulo velocidad radio seed)
;Funcion  : Selecciona el space completo entregado a la estructura asteroide.
;A.Entrada: Una estructura asteroide.
;            
;A.Salida : Space presente en la asteroide.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_space_Asteroide Asteroide)
  (if (Asteroide? Asteroide)
      (car  Asteroide)
      #f
      )
  )

;Funcion  : Selecciona componente x del asteroide.
;A.Entrada: Una estructura asteroide.
;            
;A.Salida : De ser asteroide retorna su componente x.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_px_Asteroide Asteroide)
  (if (Asteroide? Asteroide)
      (car (cdr Asteroide))
      #f
      )
  )

;Funcion  : Selecciona componente y del Asteroide.
;A.Entrada: Una estructura Asteroide.
;            
;A.Salida : De ser Asteroide retorna su componente y.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_py_Asteroide Asteroide)
  (if (Asteroide? Asteroide)
      (car (cdr (cdr Asteroide)))
      #f
      )
  )

;Funcion  : Selecciona componente angulo del Asteroide.
;A.Entrada: Una estructura Asteroide.
;            
;A.Salida : De ser Asteroide retorna su componente angulo.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_angulo_Asteroide Asteroide)
  (if (Asteroide? Asteroide)
      (car (cdr (cdr (cdr Asteroide))))
      #f
      )
  )

;Funcion  : Selecciona componente velocidad del Asteroide.
;A.Entrada: Una estructura Asteroide.
;            
;A.Salida : De ser Asteroide retorna su componente velocidad.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_velocidad_Asteroide Asteroide)
  (if (Asteroide? Asteroide)
      (car (cdr (cdr (cdr (cdr Asteroide)))))
      #f
      )
  )

;Funcion  : Selecciona componente radio del Asteroide.
;A.Entrada: Una estructura Asteroide.
;            
;A.Salida : De ser Asteroide retorna su componente radio.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_radio_Asteroide Asteroide)
  (if (Asteroide? Asteroide)
      (car (cdr (cdr (cdr (cdr (cdr Asteroide))))))
      #f
      )
  )

;Funcion  : Selecciona componente seed del Asteroide.
;A.Entrada: Una estructura Asteroide.
;            
;A.Salida : De ser Asteroide retorna su componente seed.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_seed_Asteroide Asteroide)
  (if (Asteroide? Asteroide)
      (car (cdr (cdr (cdr (cdr (cdr(cdr Asteroide)))))))
      #f
      )
  )

;-------------------------------------------------------------------------------------------------- MODIFICADORES ASTEROIDE -

;Funcion  : Toma una estructura Asteroide, un nuevo space y retorna una nuevo Asteroide con nuevo space.
;A.Entrada: Una estructura Asteroide y un nuevo space.
;            
;A.Salida : Asteroide con su space modificado
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide->space Asteroide nuevospace)
  (if (and (Asteroide? Asteroide)  )
      (create_Asteroide nuevospace  (Selector_px_Asteroide Asteroide) (Selector_py_Asteroide Asteroide) (Selector_angulo_Asteroide Asteroide) (Selector_velocidad_Asteroide Asteroide) (Selector_radio_Asteroide Asteroide)  (Selector_seed_Asteroide Asteroide)  )
      Asteroide
      )
  )

;Funcion  : Toma una estructura Asteroide, un nuevo "x" y retorna un nuevo Asteroide con nuevo "x".
;A.Entrada: Una estructura Asteroide y un nuevo "x".
;            
;A.Salida : Asteroide con su posicion "x" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide->px Asteroide nuevopx)
  (if (and (Asteroide? Asteroide) )
      (create_Asteroide (Selector_space_Asteroide Asteroide) nuevopx (Selector_py_Asteroide Asteroide) (Selector_angulo_Asteroide Asteroide) (Selector_velocidad_Asteroide Asteroide) (Selector_radio_Asteroide Asteroide) (Selector_seed_Asteroide Asteroide) )
      Asteroide
      )
  )

;Funcion  : Toma una estructura Asteroide, un nuevo "y" y retorna un nuevo Asteroide con nuevo "y".
;A.Entrada: Una estructura Asteroide y un nuevo "y".
;            
;A.Salida : Asteroide con su posicion "y" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide->py Asteroide nuevopy)
  (if (and (Asteroide? Asteroide)  (< 0 nuevopy) )
      (create_Asteroide (Selector_space_Asteroide Asteroide) (Selector_px_Asteroide Asteroide) nuevopy (Selector_angulo_Asteroide Asteroide) (Selector_velocidad_Asteroide Asteroide) (Selector_radio_Asteroide Asteroide) (Selector_seed_Asteroide Asteroide) )
      Asteroide
      )
  )

;Funcion  : Toma una estructura Asteroide, un nuevo "angulo" y retorna un nuevo Asteroide con nuevo "angulo".
;A.Entrada: Una estructura Asteroide y un nuevo "angulo".
;            
;A.Salida : Asteroide con su posicion "angulo" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide->angulo Asteroide nuevoangulo)
  (if (and (Asteroide? Asteroide) )
      (create_Asteroide (Selector_space_Asteroide Asteroide) (Selector_px_Asteroide Asteroide) (Selector_py_Asteroide Asteroide) nuevoangulo (Selector_velocidad_Asteroide Asteroide) (Selector_radio_Asteroide Asteroide) (Selector_seed_Asteroide Asteroide) )
      Asteroide
      )
  )

;Funcion  : Toma una estructura Asteroide, una nueva "velocidad" y retorna un nuevo Asteroide con nuevo "velocidad".
;A.Entrada: Una estructura Asteroide y una nueva "velocidad".
;            
;A.Salida : Asteroide con su posicion "velocidad" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide->velocidad Asteroide nuevavelocidad)
  (if (and (Asteroide? Asteroide) (number? nuevavelocidad)  )
      (create_Asteroide (Selector_space_Asteroide Asteroide) (Selector_px_Asteroide Asteroide) (Selector_py_Asteroide Asteroide) (Selector_angulo_Asteroide Asteroide) nuevavelocidad (Selector_radio_Asteroide Asteroide) (Selector_seed_Asteroide Asteroide) )
      Asteroide
      )
  )

;Funcion  : Toma una estructura Asteroide, un nuevo "radio" y retorna un nuevo Asteroide con nuevo "radio".
;A.Entrada: Una estructura Asteroide y un nuevo "radio".
;            
;A.Salida : Asteroide con su posicion "radio" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide->radio Asteroide nuevoradio)
  (if (and (Asteroide? Asteroide) )
      (create_Asteroide (Selector_space_Asteroide Asteroide) (Selector_px_Asteroide Asteroide) (Selector_py_Asteroide Asteroide) (Selector_angulo_Asteroide Asteroide) (Selector_velocidad_Asteroide Asteroide) nuevoradio (Selector_seed_Asteroide Asteroide) )
      Asteroide
      )
  )

;Funcion  : Toma una estructura Asteroide, un nuevo "seed" y retorna un nuevo Asteroide con nuevo "seed".
;A.Entrada: Una estructura Asteroide y un nuevo "seed".
;            
;A.Salida : Asteroide con su posicion "seed" modificada.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide->seed Asteroide nuevoseed)
  (if (and (Asteroide? Asteroide) )
      (create_Asteroide (Selector_space_Asteroide Asteroide) (Selector_px_Asteroide Asteroide) (Selector_py_Asteroide Asteroide) (Selector_angulo_Asteroide Asteroide) (Selector_velocidad_Asteroide Asteroide) (Selector_radio_Asteroide Asteroide) nuevoseed )
      Asteroide
      )
  )

;-------------------------------------------------------------------------------------------------- F. VARIAS ASTEROIDES
;Funcion  : Cambia de posicion un asteroide a un frame t+1
;A.Entrada: Una estructura disparo.
;            
;A.Salida : Space presente en la disparo.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (moveAsteroid asteroide angulo velocidad)
  (Asteroide->velocidad (Asteroide->angulo (Asteroide->py (Asteroide->px asteroide
                                                                         (mod (+ (Selector_px_Asteroide asteroide)
                                                                                 (round (* velocidad
                                                                                           (cos (Grad_Rad ( + (Selector_angulo_Asteroide asteroide)
                                                                                                              angulo
                                                                                                              )
                                                                                                          )
                                                                                                ) 
                                                                                           )
                                                                                        )
                                                                                 )
                                                                              (Selector_N (Selector_space_Asteroide asteroide))
                                                                              )
                                                                         )                      
                                                          (mod (+ (Selector_py_Asteroide asteroide)
                                                                  (round (* velocidad
                                                                            (sin (Grad_Rad ( + (Selector_angulo_Asteroide asteroide)
                                                                                               angulo
                                                                                               )
                                                                                           )
                                                                                 )
                                                                            )
                                                                         )
                                                                  )
                                                               (Selector_N (Selector_space_Asteroide asteroide))
                                                               )
                                                          )
                                           ( + (Selector_angulo_Asteroide asteroide)
                                               angulo
                                               )               
                                           )
                        (+ (Selector_velocidad_Asteroide asteroide)
                           velocidad
                           )    
                        )      
  
  
  )
 
;Funcion  : Llamado abreviado de moveAsteroid
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (moverAsteroides x)
  (moveAsteroid x 0 (Selector_velocidad_Asteroide x))
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (create_RL_Asteroides N M A P L seed)
  (if (= 0 A)
      null
      (cons (create_Asteroide  (list (list  N M A P L seed (list))(list))
                               (round (mod (myRandom (myRandom seed)) M))
                               (round (mod (myRandom seed) N))
                               seed
                               (myRandom (myRandom (myRandom seed)))
                               radioasteroideinicial
                               seed )
            (create_RL_Asteroides N M (- A 1) P L (myRandom seed) ))
   )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (create_RC_Asteroides N M A P L seed Resultado)
  (if (= 0 A)
      Resultado
      (create_RC_Asteroides N
                            M
                            (- A 1)
                            P
                            L
                            (myRandom seed)
                            (cons (create_Asteroide  (list (list  N M A P L seed (list))(list))
                                                     (round (mod (myRandom (myRandom seed)) M))
                                                     (round (mod (myRandom seed) N))
                                                     seed
                                                     (myRandom (myRandom (myRandom seed)))
                                                     radioasteroideinicial
                                                     seed )
                                  Resultado )  )
      )
  )

;-----------------------------------------------------------------------------------------------------------FIN ASTEROIDE------
;-------------------------------------------------------------------------------------------------- TDA DISPARO
;(list         space px py velocidad seed estadoJuego angulo)
;-------------------------------------------------------------------------------------------------- REPRESENTACION DISPARO
;(init_disparo space px py angulo velocidad pxf pyf largo seed)
;-------------------------------------------------------------------------------------------------- CONSTRUCTOR DISPARO
;Funcion  : Construye un disparo.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (create_disparo space px py angulo velocidad pxf pyf largo seed)
  (if (and (integer? px) (list? space) (integer? py) (integer? pxf) (integer? pyf) (number? velocidad) (number? largo) (integer? seed) )
      (list space px py angulo velocidad pxf pyf largo seed)
      null
      )  
  )

;-------------------------------------------------------------------------------------------------- F.DE PERTENENCIA DISPARO
;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (disparo? posibledisparo)
  (if (list? posibledisparo)
      (if (= 9 (length posibledisparo))
          (if (and
               (list?    (car  posibledisparo));space
               (number? (car (cdr posibledisparo)));px
               (number? (car (cdr (cdr posibledisparo))));py
               (number? (car (cdr (cdr (cdr posibledisparo)))));angulo
               (number? (car (cdr (cdr (cdr (cdr posibledisparo))))));velocidad
               (number? (car (cdr (cdr (cdr (cdr (cdr posibledisparo)))))));pxf
               (number? (car (cdr (cdr (cdr (cdr (cdr (cdr posibledisparo))))))));pyf
               (number? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr posibledisparo)))))))));largo
               (number? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr posibledisparo))))))))));seed
               )
              #t
              #f
              )
          #f
          )
      #f
      )
  )

;-------------------------------------------------------------------------------------------------- SELECTORES DISPARO
;Funcion  : Selecciona el space completo entregado a la estructura disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : Space presente en la disparo.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_space_disparo disparo)
  (if (disparo? disparo)
      (car  disparo)
      #f
      )
  )

;Funcion  : Selecciona componente x del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente x.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_px_disparo disparo)
  (if (disparo? disparo)
      (car (cdr disparo))
      #f
      )
  )

;Funcion  : Selecciona componente y del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente y.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_py_disparo disparo)
  (if (disparo? disparo)
      (car (cdr (cdr disparo)))
      #f
      )
  )

;Funcion  : Selecciona componente angulo del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente angulo.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_angulo_disparo disparo)
  (if (disparo? disparo)
      (car (cdr (cdr (cdr disparo))))
      #f
      )
  )

;Funcion  : Selecciona componente velocidad del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente velocidad.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_velocidad_disparo disparo)
  (if (disparo? disparo)
      (car (cdr (cdr (cdr (cdr disparo)))))
      #f
      )
  )

;Funcion  : Selecciona componente 'posicion "x" final' del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente 'posicion "x" final'.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_pxf_disparo disparo)
  (if (disparo? disparo)
      (car (cdr (cdr (cdr (cdr (cdr disparo))))))
      #f
      )
  )

;Funcion  : Selecciona componente 'posicion "y" final' del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente 'posicion "y" final'.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_pyf_disparo disparo)
  (if (disparo? disparo)
      (car (cdr (cdr (cdr (cdr (cdr(cdr disparo)))))))
      #f
      )
  )

;Funcion  : Selecciona componente largo del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente largo.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_largo_disparo disparo)
  (if (disparo? disparo)
      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr disparo))))))))
      #f
      )
  )

;Funcion  : Selecciona componente seed del disparo.
;A.Entrada: Una estructura disparo.
;            
;A.Salida : De ser disparo retorna su componente seed.
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_seed_disparo disparo)
  (if (disparo? disparo)
      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr disparo)))))))))
      #f
      )
  )

;-------------------------------------------------------------------------------------------------- MODIFICADORES DISPARO
;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->space disparo nuevospace)
  (if (and (disparo? disparo) )
      (create_disparo nuevospace (Selector_px_disparo disparo) (Selector_py_disparo disparo) (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo) (Selector_pxf_disparo disparo) (Selector_pyf_disparo disparo) (Selector_largo_disparo disparo) (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->px disparo nuevopx)
  (if (and (disparo? disparo))
      (create_disparo (Selector_space_disparo disparo) nuevopx (Selector_py_disparo disparo) (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo) (Selector_pxf_disparo disparo) (Selector_pyf_disparo disparo) (Selector_largo_disparo disparo) (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->py disparo nuevopy)
  (if (and (disparo? disparo) )
      (create_disparo (Selector_space_disparo disparo) (Selector_px_disparo disparo) nuevopy (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo) (Selector_pxf_disparo disparo) (Selector_pyf_disparo disparo) (Selector_largo_disparo disparo) (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->angulo disparo nuevoangulo)
  (if (and (disparo? disparo) )
      (create_disparo (Selector_space_disparo disparo) (Selector_px_disparo disparo) (Selector_py_disparo disparo) nuevoangulo (Selector_velocidad_disparo disparo) (Selector_pxf_disparo disparo) (Selector_pyf_disparo disparo) (Selector_largo_disparo disparo) (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->velocidad disparo nuevovelocidad)
  (if (and (disparo? disparo) )
      (create_disparo (Selector_space_disparo disparo) (Selector_px_disparo disparo) (Selector_py_disparo disparo) (Selector_angulo_disparo disparo) nuevovelocidad (Selector_pxf_disparo disparo) (Selector_pyf_disparo disparo) (Selector_largo_disparo disparo) (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->pxf disparo nuevopxf)
  (if (and (disparo? disparo))
      (create_disparo (Selector_space_disparo disparo) (Selector_px_disparo disparo) (Selector_py_disparo disparo) (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo) nuevopxf (Selector_pyf_disparo disparo) (Selector_largo_disparo disparo) (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->pyf disparo nuevopyf)
  (if (and (disparo? disparo))
      (create_disparo (Selector_space_disparo disparo) (Selector_px_disparo disparo) (Selector_py_disparo disparo) (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo) (Selector_pxf_disparo disparo) nuevopyf (Selector_largo_disparo disparo) (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->largo disparo nuevolargo)
  (if (and (disparo? disparo) )
      (create_disparo (Selector_space_disparo disparo) (Selector_px_disparo disparo) (Selector_py_disparo disparo) (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo) (Selector_pxf_disparo disparo) (Selector_pyf_disparo disparo) nuevolargo (Selector_seed_disparo disparo) )
      disparo
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Disparo->seed disparo nuevoseed)
  (if (and (disparo? disparo)
           )
      (create_disparo (Selector_space_disparo disparo) (Selector_px_disparo disparo) (Selector_py_disparo disparo) (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo) (Selector_pxf_disparo disparo) (Selector_pyf_disparo disparo) (Selector_largo_disparo disparo) nuevoseed )
      disparo
      )
  )

;-------------------------------------------------------------------------------------------------- F. VARIAS DISPARO
;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (moverDisparo disparo angulo velocidad)
  (Disparo->velocidad (Disparo->angulo (Disparo->py (Disparo->px disparo
                                                                 (mod (+ (Selector_px_disparo disparo)
                                                                         (round (* velocidad
                                                                                   (cos (Grad_Rad ( + (Selector_angulo_disparo disparo)
                                                                                                      angulo
                                                                                                      )
                                                                                                  )
                                                                                        ) 
                                                                                   )
                                                                                )
                                                                         )
                                                                      (Selector_N (Selector_space_disparo disparo))
                                                                      )
                                                                 )                      
                                                    (mod (+ (Selector_py_disparo disparo)
                                                            (round (* velocidad
                                                                      (sin (Grad_Rad ( + (Selector_angulo_disparo disparo)
                                                                                         angulo
                                                                                         )
                                                                                     )
                                                                           )
                                                                      )
                                                                   )
                                                            )
                                                         (Selector_N (Selector_space_disparo disparo))
                                                         )
                                                    )
                                       (Selector_angulo_disparo disparo)                                                    
                                       )
                      (Selector_velocidad_disparo disparo)                         
                      )      
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (moverDisparos disparo)
  (moverDisparo disparo (Selector_angulo_disparo disparo) (Selector_velocidad_disparo disparo))
 )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Shoot space constante seed)
  (if (ComparacionNave (Selector_Asteroides (space->Disparos (Update_Space space seed) (cons (create_disparo space (Selector_px_nave (Selector_Nave space)) (Selector_py_nave (Selector_Nave space)) (Selector_angulo_nave (Selector_Nave space)) constante (round (+ (Selector_px_nave (Selector_Nave space)) (* constante (cos (Selector_angulo_nave (Selector_Nave space)))))) (round (+ (Selector_py_nave (Selector_Nave space)) (* constante (sin (Selector_angulo_nave (Selector_Nave space)))))) (Selector_L space) seed) (Selector_Disparos (Update_Space space seed))) )) (Selector_Nave (space->Disparos (Update_Space space seed) (cons (create_disparo space (Selector_px_nave (Selector_Nave space)) (Selector_py_nave (Selector_Nave space)) (Selector_angulo_nave (Selector_Nave space)) constante (round (+ (Selector_px_nave (Selector_Nave space)) (* constante (cos (Selector_angulo_nave (Selector_Nave space)))))) (round (+ (Selector_py_nave (Selector_Nave space)) (* constante (sin (Selector_angulo_nave (Selector_Nave space)))))) (Selector_L space) seed) (Selector_Disparos (Update_Space space seed))) )) radionave)
      (nave->estadojuego (Selector_Nave space) 0)
      (space->Disparos (Update_Space space seed) (cons (create_disparo space (Selector_px_nave (Selector_Nave space)) (Selector_py_nave (Selector_Nave space)) (Selector_angulo_nave (Selector_Nave space)) constante (round (+ (Selector_px_nave (Selector_Nave space)) (* constante (cos (Selector_angulo_nave (Selector_Nave space)))))) (round (+ (Selector_py_nave (Selector_Nave space)) (* constante (sin (Selector_angulo_nave (Selector_Nave space)))))) (Selector_L space) seed) (Selector_Disparos (Update_Space space seed))) )
      )
  )

;-------------------------------------------------------------------------------------------------------------FIN DISPARO------

;-------------------------------------------------------------------------------------------------- TDA SPACE 
;-------------------------------------------------------------------------------------------------- REPRESENTACION SPACE 
;'( '(N M A P L seed listatablero)
;   '( '(nave) '(asteroides) '(disparos) )
;   )

;(list (list 20 30 4 5 8 3 (create_tablero_vacio 20 30 ))
;      (list (create_nave  "space" 10 10 6 888 1 90) (list 1 "asteroides") (list 2 "disparos")) )

;-------------------------------------------------------------------------------------------------- CONSTRUCTOR SPACE 
;Funcion  : Construye un space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (create_Space N M A P L seed tablero nave asteroides disparos)
  (if (and (integer? N) (< 0 N) (integer? M) (< 0 M) (integer? A) (< 0 A) (number? P) (< 0 P) (number? L) (< 0 L) (integer? seed)
           (list? tablero) (nave? nave) (list? asteroides) (list? disparos) )
      ;Creacion de la Matriz que representa el tablero
      (list (list N M A P L seed (list))
            (list nave asteroides disparos) )
      (list)
      )
  )

;-------------------------------------------------------------------------------------------------- F.DE PERTENENCIA SPACE
;Funcion  : Funcion de pertenencia a Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (CheckSpace posiblespace)
  (if (list? posiblespace)
      (if (= 2 (length posiblespace))
          (if (and
               (number? (car (car posiblespace)))                                       ; N
               (< 0 (car (car posiblespace)))                                            ; N mayor a 0
               (number? (car (car posiblespace)))                                       ; M
               (< 0 (car (car posiblespace)))                                            ; M mayor que 0
               (number? (car (cdr (cdr (car posiblespace)))))                           ; A
               (< 0      (car (cdr (cdr (car posiblespace)))))                           ; Cantidad de asteroides mayor a 0
               (number? (car (cdr (cdr (cdr (car posiblespace))))))                     ; P
               (< 0      (car (cdr (cdr (cdr (car posiblespace))))))                     ; P mayor que 0
               (number?  (car (cdr (cdr (cdr (cdr (car posiblespace)))))))               ; L
               (number? (car (cdr (cdr (cdr (cdr (cdr(car posiblespace))))))))          ; Seed
               (list?    (car (cdr (cdr (cdr (cdr (cdr (cdr (car posiblespace)))))))))   ; Tablero            
               )
              #t
              #f
              )
          #f
          )
      #f
      )
 )

;-------------------------------------------------------------------------------------------------- SELECTORES SPACE 
;Funcion  : Selecciona la variable N presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_N space)
  (if (CheckSpace space)
      (car (car space))
      null
      )
  )

;Funcion  : Selecciona la variable M presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_M space)
  (if (CheckSpace space)
      (car (cdr (car space)))
      null
      )
  )

;Funcion  : Selecciona la variable A presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_A space)
  (if (CheckSpace space)
      (car (cdr (cdr (car space))))
      null
      )
  )

;Funcion  : Selecciona la variable P presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_P space)
  (if (CheckSpace space)
      (car (cdr (cdr (cdr (car space)))))
      null
      )
  )

;Funcion  : Selecciona la variable L presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_L space)
  (if (CheckSpace space)
      (car (cdr (cdr (cdr (cdr (car space))))))
      null
      )
  )

;Funcion  : Selecciona la variable L presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_seed space)
  (if (CheckSpace space)
      (car (cdr (cdr (cdr (cdr (cdr(car space)))))))
      null
      )
  )

;Funcion  : Selecciona la variable tablero presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_tablero space)
  (if (CheckSpace space)
      (car (cdr (cdr (cdr (cdr (cdr (cdr(car space))))))))
      null
      )
  )

;Funcion  : Selecciona la nave presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_Nave space)
  (if (CheckSpace space)
      (car (car (cdr space)))
      null
      )
  )

;Funcion  : Selecciona los asteroides presentes en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_Asteroides space)
  (if (CheckSpace space)
      (car (cdr (car (cdr space))))
      null
      )
  )

;Funcion  : Selecciona los Disparos presente en el tda Space.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Selector_Disparos space)
  (if (CheckSpace space)
      (car (cdr (cdr (car (cdr space)))))
      null
      )        
  )

;-------------------------------------------------------------------------------------------------- MODIFICADORES SPACE 
;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->N space nuevoN )
  (if (CheckSpace space)
      (create_Space nuevoN (Selector_M space) (Selector_A space) (Selector_P space) (Selector_L space) (Selector_seed space) (Selector_tablero space) (Selector_Nave space) (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )               
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->M space nuevoM )
  (if (CheckSpace space)
      (create_Space (Selector_N space) nuevoM (Selector_A space) (Selector_P space) (Selector_L space) (Selector_seed space) (Selector_tablero space) (Selector_Nave space) (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )               
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->A space nuevoA )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space)  nuevoA (Selector_P space) (Selector_L space) (Selector_seed space) (Selector_tablero space) (Selector_Nave space) (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )                 
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->P space nuevoP )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space) (Selector_A space) nuevoP (Selector_L space) (Selector_seed space) (Selector_tablero space) (Selector_Nave space) (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )                
  )
;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->L space nuevoL )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space) (Selector_A space) (Selector_P space) nuevoL (Selector_seed space) (Selector_tablero space) (Selector_Nave space) (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )           
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->seed space nuevaseed )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space) (Selector_A space) (Selector_P space) (Selector_L space) nuevaseed (Selector_tablero space) (Selector_Nave space) (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )           
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->tablero space nuevotablero  )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space) (Selector_A space) (Selector_P space) (Selector_L space) (Selector_seed space) nuevotablero (Selector_Nave space) (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )           
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->Nave space nuevaNave )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space) (Selector_A space) (Selector_P space) (Selector_L space) (Selector_seed space) (Selector_tablero space) nuevaNave (Selector_Asteroides space) (Selector_Disparos space) )
      space
      )           
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->Asteroides space nuevosAsteroides )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space) (Selector_A space) (Selector_P space) (Selector_L space) (Selector_seed space) (Selector_tablero space) (Selector_Nave space) nuevosAsteroides (Selector_Disparos space) )
      space
      )           
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (space->Disparos space nuevosDisparos )
  (if (CheckSpace space)
      (create_Space (Selector_N space) (Selector_M space) (Selector_A space) (Selector_P space) (Selector_L space) (Selector_seed space) (Selector_tablero space) (Selector_Nave space) (Selector_Asteroides space) nuevosDisparos )
      space
      )           
  )

;-------------------------------------------------------------------------------------------------- F. VARIAS SPACE
;Funcion  : Crea una lista de "N" ceros para representar una fila vacia.
;A.Entrada: Un entero que representa la cantidad de ceros en la fila.
;            
;A.Salida : Una lista llena de N ceros.
;
;Funcion Recursiva? : Si, se utiliza una R.Lineal, dado que me permite guardar
; N ceros en una lista vacia entregada en el caso base.
;Ejemplos:
;         (create_fila_vacia 5)  -----> {0 0 0 0 0}
;         (create_fila_vacia 1)  -----> {0}
;         (create_fila_vacia 14) -----> {0 0 0 0 0 0 0 0 0 0 0 0 0 0}
(define (create_fila_vacia N)
  (if (= N 0)
      (list)
      (cons 0 (create_fila_vacia (- N 1)) )
      )
  )

;Funcion  : Crea una matriz tablero de MxN vacio.
;A.Entrada: Dos enteros que representan Columna (x Fila) ó (x e y) ó (M x N).
;            
;A.Salida : Una lista de listas llena de ceros (MxN).
;
;Funcion Recursiva? : Si, se utiliza R.Lineal, primer argumento de cons es una lista 
; de N ceros. que se acopla M veces a la lista del caso base dando lugar a la Matriz M = filas N = columnas. 
;Ejemplos:
;         (create_tablero_vacio 5 3) -----> {{0 0 0} {0 0 0} {0 0 0} {0 0 0} {0 0 0}}
;         (create_tablero_vacio 3 8) -----> {{0 0 0 0 0 0 0 0} {0 0 0 0 0 0 0 0} {0 0 0 0 0 0 0 0}}
;         (create_tablero_vacio 4 4) -----> {{0 0 0 0} {0 0 0 0} {0 0 0 0} {0 0 0 0}}
(define (create_tablero_vacio M N)
  (if (or (string? M) (string? N) (list? M) (list? N) (< N 0) (< M 0) )
      (list)
      (if (= M 0 )
          (list)
          (cons (create_fila_vacia N) (create_tablero_vacio (- M 1) N))
          )
      )
  )

;Funcion  : Selecciona una fila de el tablero.
;A.Entrada: Space es una lista de listas de igual tamaño, py es un entero refiere a la posicion Y, 
;           auxiliar que controla la recursion.
;A.Salida : Lista que representa la fila seleccionada.
;
;Funcion Recursiva? : Si, se utiliza una R.de Cola ya que vamos acortando la lista original
; con cdr y obtenemos la fila de interes con el car en la iteracion py-esima.
;Ejemplos:
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Selector_fila A 3 1) -----> {7 8 9}
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Selector_fila A 2 1) -----> {4 5 6}
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Selector_fila A 1 1) -----> {1 2 3} 
(define (Selector_fila space py auxiliar)
  (if (= auxiliar py)
      (car space)
      (Selector_fila (cdr space) py (+ auxiliar 1) )
      )
  )

;Funcion  : Llamado simplificado de Selector_fila.
;A.Entrada: Space es una lista de listas de igual tamaño, py es un entero refiere a la posicion Y.
;            
;A.Salida : Lista que representa la fila seleccionada.
;
;Funcion Recursiva? : NO.
;
;Ejemplos:
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Seleccion_posicion A 3) -----> {7 8 9}
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Seleccion_posicion A 2) -----> {4 5 6}
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Seleccion_posicion A 1) -----> {1 2 3}
(define (Seleccion_posicion space py)
  ( if (< 0 py)
       (Selector_fila space py 1)
       null
       )
  )

;Funcion que selecciona un elemento, de una columna especifica, de una fila en el tablero.
;A.Entrada: Matriz es una lista de listas, px entero que representa las columnas, py entero
;
; que representa las filas.
;A.Salida : Valor de la posicion buscada.
;
;Funcion Recursiva? : No.
;Ejemplos (siempre de la forma columaxfila):
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Selector_x_y A 3 3) -----> 9
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Selector_x_y A 1 2) -----> 4
;         Sea A: {{1 2 3} {4 5 6} {7 8 9} {10 11 12}}; (Selector_x_y A 2 3) -----> 8
(define (Selector_x_y matriz px py)
  ( if (and (< 0 py) (< 0 px) )
       (Seleccion_posicion (Seleccion_posicion matriz py) px)
       null
       )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Comparacion lista elemento )
  (if (equal?  (cdr lista) null)
      #f
      (or (Comparacion (cdr lista) elemento)
          (Choque? (Selector_px_Asteroide elemento) (Selector_py_Asteroide elemento) (Selector_radio_Asteroide elemento) (Selector_px_Asteroide (car lista)) (Selector_py_Asteroide (car lista)) (Selector_radio_Asteroide (car lista)) )
          )
      )
  )

;Funcion  : Compara si se intersecta la nace con una lista de asteroides.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (ComparacionNave lista Nave radio)
  (if (= 0 (length lista))
      #f
      (or (ComparacionNave (cdr lista) Nave radio)
          (Choque? (Selector_px_nave Nave) (Selector_py_nave Nave)  radio (Selector_px_Asteroide (car lista)) (Selector_py_Asteroide (car lista)) (Selector_radio_Asteroide (car lista)) )
          )
      )
  )

;Funcion  : Verifica si el disparo choca con un asteroide
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (eliminar_elemento_lista lista elem)  
  (cond [(equal? lista null) null]
        [(equal? #t (Choque? (Selector_px_Asteroide (car lista))
                             (Selector_py_Asteroide (car lista))
                             (Selector_radio_Asteroide (car lista))
                             (Selector_px_disparo elem)
                             (Selector_px_disparo elem)
                             radiodisparo)) (cdr lista)]
        [else (cons (car lista) (eliminar_elemento_lista (cdr lista) elem))]
        )  
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (identifica_elemento lista elem)
  (if (equal? lista null)
      null
      (if (equal? #t (Choque? (Selector_px_Asteroide (car lista)) (Selector_py_Asteroide (car lista)) (Selector_radio_Asteroide (car lista)) (Selector_px_disparo elem) (Selector_py_disparo elem) radiodisparo))
          (car lista)
          (cons (car lista) (identifica_elemento (cdr lista) elem))
          )
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (disparo_choca? lista elem)
  (if (equal? lista null)
      #f
      (if (equal? #t (Choque? (Selector_px_Asteroide (car lista)) (Selector_py_Asteroide (car lista)) (Selector_radio_Asteroide (car lista)) (Selector_px_disparo elem) (Selector_py_disparo elem) radiodisparo))
          #t
          (or #f (disparo_choca? (cdr lista) elem))
          )
      )
  )

;Funcion  : Crea tantos asteroides como pida la seed y todos con un radio equivalente a la mitad del anterior, de ser 2 el original se entrega una lista vacia.
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (fisica_Asteroides asteroide seed)
  (cond [(>= 2 (Selector_radio_Asteroide asteroide)) (list)
                                                     ]
        [(>= 1 seed) (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))                                                                       
                           )]
        [(= 2 seed) (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 45))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))                                                                       
                          )]
        [(= 3 seed) (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 45))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 135)) (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          )]
        [(= 4 seed) (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 45))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 135)) (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 315)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          )]
        [(= 5 seed) (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 45))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 135)) (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 315)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 225)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          )]
        [(= 6 seed) (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 45))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 135)) (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 315)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 225)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 90))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          )]
        [(= 7 seed) (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 45))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 135)) (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 315)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 225)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 90))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 270)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                          )]
        [else (list (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 0))   (mod (+ (Selector_py_Asteroide asteroide) 0) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                    (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 45))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                    (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 135)) (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                    (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 315)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(+ (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                    (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 225)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 1.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (mod(- (Selector_px_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2)) (Selector_N (Selector_space_Asteroide asteroide))))
                    (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 90))  (mod (+ (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                    (Asteroide->px (Asteroide->py (Asteroide->angulo (Asteroide->velocidad (Asteroide->radio asteroide (round (/(Selector_radio_Asteroide asteroide) 2))) (+ (Selector_velocidad_Asteroide asteroide) seed)) (+ (Selector_angulo_Asteroide asteroide) 270)) (mod (- (Selector_py_Asteroide asteroide) (* (/(Selector_radio_Asteroide asteroide) 2) 2.5)) (Selector_M (Selector_space_Asteroide asteroide)))) (+ (Selector_px_Asteroide asteroide) 0))
                    )]
        )  
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (choqueDisparos_Asteroides space asteroides disparos nuevosAsteroides nuevosDisparos)
  (cond [(= 0 (length disparos)) (space->Asteroides (space->Disparos space nuevosDisparos )
                                                    (append asteroides nuevosAsteroides) )]
        [(equal? #t (disparo_choca? asteroides (car disparos))) (choqueDisparos_Asteroides space
                                                                                           (eliminar_elemento_lista asteroides (car disparos))
                                                                                           (cdr disparos)
                                                                                           (append (fisica_Asteroides (identifica_elemento asteroides (car disparos)) (Selector_seed space)) nuevosAsteroides)
                                                                                           nuevosDisparos) ]
        [else (choqueDisparos_Asteroides space
                                         asteroides
                                         (cdr disparos)
                                         nuevosAsteroides
                                         (cons (car disparos) nuevosDisparos)) ]
        )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Asteroide_choca? lista elem)
  (if (equal? lista null)
      #f
      (if (equal? #t (Choque? (Selector_px_Asteroide (car lista)) (Selector_py_Asteroide (car lista)) (Selector_radio_Asteroide (car lista)) (Selector_px_Asteroide elem) (Selector_py_Asteroide elem) (Selector_radio_Asteroide elem)))
          #t
          (or #f (disparo_choca? (cdr lista) elem))
          )
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (eliminar_asteroide_lista lista elem)
  (cond [(equal? lista null) null]
        [(equal? #t (Choque? (Selector_px_Asteroide (car lista))
                             (Selector_py_Asteroide (car lista))
                             (Selector_radio_Asteroide (car lista))
                             (Selector_px_Asteroide elem)
                             (Selector_px_Asteroide elem)
                             (Selector_radio_Asteroide elem))) (cdr lista)]
        [else (cons (car lista) (eliminar_elemento_lista (cdr lista) elem))]
        )  
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (modificarTrayectoria lista elem)
  (if (Asteroide_choca? lista elem)
      (moveAsteroid elem (* -1 (Selector_angulo_Asteroide elem)) (myRandom (Selector_seed_Asteroide elem)))
      elem
      )    
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (AplicacionModTrayectoria lista resultado)
  (cond [(equal? lista null) (list)]
        [(equal? #t (Asteroide_choca? (eliminar_asteroide_lista lista (car lista)) (car lista)))  ( cons (modificarTrayectoria (eliminar_asteroide_lista lista (car lista)) (car lista)) (AplicacionModTrayectoria (cdr lista) resultado))]
        [else (cons (car lista) (AplicacionModTrayectoria (cdr lista) resultado))]
        )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Update_Space space seed)
  (if (ComparacionNave (Selector_Asteroides space) (Selector_Nave space) radionave)
      (nave->estadojuego (Selector_Nave space) 0)      
      (if (= 0 (length (Selector_Asteroides space)))
          (nave->estadojuego (Selector_Nave space) 1)
          ;ejecuto las colisiones asteroide y disparos
          (if (ComparacionNave (Selector_Asteroides (create_Space (Selector_N space)
                                                                  (Selector_M space)
                                                                  (Selector_A space)
                                                                  (Selector_P space)
                                                                  (Selector_L space)
                                                                  (myRandom seed)
                                                                  (list)                                                      
                                                                  (moveShip space 0 0 seed)
                                                                  (Selector_Asteroides(choqueDisparos_Asteroides space (Selector_Asteroides space) (Selector_Disparos space) (list) (list)))                                                     
                                                                  (Selector_Disparos (choqueDisparos_Asteroides space (Selector_Asteroides space) (Selector_Disparos space) (list) (list)))                                                       
                                                                  ))
                               (Selector_Nave (create_Space (Selector_N space)
                                                            (Selector_M space)
                                                            (Selector_A space)
                                                            (Selector_P space)
                                                            (Selector_L space)
                                                            (myRandom seed)
                                                            (list)                                                       
                                                            (moveShip space 0 0 seed)
                                                            (Selector_Asteroides(choqueDisparos_Asteroides space (Selector_Asteroides space) (Selector_Disparos space) (list) (list)))                                                     
                                                            (Selector_Disparos (choqueDisparos_Asteroides space (Selector_Asteroides space) (Selector_Disparos space) (list) (list)))                                                     
                                                            )
                                              )
                               radionave)
              (nave->estadojuego (Selector_Nave space) 0)
              (create_Space (Selector_N space)
                            (Selector_M space)
                            (Selector_A space)
                            (Selector_P space)
                            (Selector_L space)
                            (myRandom seed)
                            (list)                                                         
                            (moveShip space 0 0 seed); 
                            (AplicacionModTrayectoria (map moverAsteroides (Selector_Asteroides(choqueDisparos_Asteroides space (Selector_Asteroides space) (Selector_Disparos space) (list) (list)))) (list))                                                     
                            (map moverDisparos (Selector_Disparos (choqueDisparos_Asteroides space (Selector_Asteroides space) (Selector_Disparos space) (list) (list))))                                                      
                            )              
              )
          )          
      )
  )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Demo_lazy space seed)
  (cond [(not (and (list? space) (number? seed))) null]
        [(or (= 0 (Selector_estadojuego_nave (Selector_Nave space)) ) (= 0 (Selector_estadojuego_nave (Selector_Nave space)) ) ) null]
        [else (cons space (Demo_lazy (Shoot (Update_Space space 4) Velocidad_disparo seed ) (myRandom seed)) )]
        )
 )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Space->String space resultado)
   null
 )

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (Choque? objeto1x objeto1y radio1 objeto2x objeto2y radio2)
  (if (and (integer? objeto1x)
           (< 0 objeto1x )
           (integer? objeto1y)
           (< 0 objeto1y )
           (integer? objeto2x)
           (< 0 objeto2x )
           (integer? objeto2y)
           (< 0 objeto2y )
           (integer? radio1)
           (< 0 radio1 )
           (integer? radio2)
           (< 0 radio2 )
           )
      (if (<= (expt (+ (expt (- objeto1x objeto2x) 2) (expt (- objeto1y objeto2y) 2)) 0.5)
              (+ radio1 radio2)
             )
          #t
          #f
          )
      #f
      )
  )

;-------------------------------------------------------------------------------------------------------------FIN TDA SPACE------

;-------------------------------------------------------------------------------------------------- CREATESPACE RL

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (createSpaceRL N M A P L seed)
  (create_Space N M A P L seed (list)
                (create_nave  (list (list  N M A P L seed (list))(list)) (round (/ N 2)) (round (/ M 2)) 0 seed 2 0)
                (create_RL_Asteroides N M A P L seed);crear asteroides
                (list))
  )

;-------------------------------------------------------------------------------------------------------------FIN SPACE RC------
;-------------------------------------------------------------------------------------------------- CREATESPACE RC

;Funcion  : 
;A.Entrada: 
;            
;A.Salida : 
;
;Funcion Recursiva? : 
;
;Ejemplos:
;
;
;
(define (createSpaceRC N M A P L seed)
  (create_Space N M A P L seed (list)
                (create_nave  (list (list  N M A P L seed (list))(list)) (round (/ N 2)) (round (/ M 2)) 0 seed 2 0)
                (create_RC_Asteroides N M A P L seed (list));crear asteroides
                (list))
 )

;-------------------------------------------------------------------------------------------------------------FIN SPACE RC------


;#############################################################################################################ZONA PRUEBAS
;(create_tablero_vacio 20 30 )
;(list (list  20 30 4 5 8 3 (list))(list))

(define D (list (create_disparo (list (list  20 30 4 5 8 3 (list))(list)) 3 2 3 4 5 6 7 8) (create_disparo (list (list  20 30 4 5 8 3 (list))(list)) 40 2 3 4 5 6 7 8) ))

(define Asteroides (list (list  (list (list  20 30 4 5 8 3 (list))(list)) 3 2 180 2 4 33) (list  (list (list  20 30 4 5 8 3 (list))(list)) 6 5 180 1 4 33) (list  (list (list  20 30 4 5 8 3 (list))(list)) 1 7 180 3 4 33) ))

(define sp1 (list (list   20 30 4 5 8 3 (list)) (list (create_nave  (list (list  20 30 4 5 8 3 (list))(list)) 10 1 6 888 1 90) Asteroides D) ))

(define A   (create_Asteroide  sp1 5 4 0 1 4 134 ) )
